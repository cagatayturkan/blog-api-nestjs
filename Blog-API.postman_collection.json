{
	"info": {
		"_postman_id": "blog-api-collection",
		"name": "Blog REST API - Complete Test Suite",
		"description": "Comprehensive test collection for Blog REST API with Session-based JWT Authentication. Uses cache-based sessions with automatic TTL refresh on each request. No refresh tokens needed - sessions are managed automatically.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication Flow",
			"item": [
				{
					"name": "1. Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('testUserId', response.data.id);",
									"    pm.environment.set('testUserEmail', response.data.email);",
									"    console.log('‚úÖ User registered successfully');",
									"} else {",
									"    console.log('‚ùå Registration failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"{{testUserPassword}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "2. Admin Login (Session-based)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('adminToken', response.data.access_token);",
									"    pm.environment.set('adminUserId', response.data.user.id);",
									"    console.log('‚úÖ Admin logged in successfully with session');",
									"    console.log('üÜî Session ID embedded in JWT token');",
									"} else {",
									"    console.log('‚ùå Admin login failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "3. Test User Login (Session-based)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('userToken', response.data.access_token);",
									"    console.log('‚úÖ User logged in successfully with session');",
									"    console.log('üÜî Session ID embedded in JWT token');",
									"} else {",
									"    console.log('‚ùå User login failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"password\": \"{{testUserPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "4. Get Admin Profile (Session Active)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Profile accessed - Session is active');",
									"    console.log('üîÑ Session TTL refreshed automatically');",
									"} else if (pm.response.code === 401) {",
									"    console.log('‚ùå Session expired - Need to login again');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "profile"]
						}
					}
				}
			]
				},
				{
			"name": "üîí Session Management",
			"item": [
				{
					"name": "0. Test Session TTL Refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Session should extend on activity', function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"console.log('‚úÖ Session TTL extended by this request - Session remains active for another 1 minute');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "profile"]
						}
					}
		},
				{
					"name": "1. Change Password (Authenticated)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oldPassword\": \"{{adminPassword}}\",\n  \"newPassword\": \"{{newAdminPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/change-password",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "change-password"]
						}
					}
				},
				{
					"name": "2. Forgot Password Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Forgot password email sent');",
									"    console.log('üìß Check your email for reset token');",
									"} else {",
									"    console.log('‚ùå Forgot password request failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{forgotPasswordEmail}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "forgot-password"]
						}
					}
				},
				{
					"name": "3. Validate Reset Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data.valid) {",
									"        console.log('‚úÖ Reset token is valid');",
									"        console.log('üìß Email: ' + response.data.email);",
									"    } else {",
									"        console.log('‚ùå Reset token is invalid or expired');",
									"    }",
									"} else {",
									"    console.log('‚ùå Token validation failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{resetToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/validate-reset-token",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "validate-reset-token"]
						}
					}
				},
				{
					"name": "4. Reset Password with Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Password reset successfully');",
									"    console.log('üîë You can now login with new password');",
									"} else {",
									"    console.log('‚ùå Password reset failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{resetToken}}\",\n  \"newPassword\": \"{{newPasswordAfterReset}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password-with-token",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "reset-password-with-token"]
						}
					}
				},
				{
					"name": "5. Login with New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('resetUserToken', response.data.access_token);",
									"    console.log('‚úÖ Login successful with new password');",
									"} else {",
									"    console.log('‚ùå Login failed with new password');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{forgotPasswordEmail}}\",\n  \"password\": \"{{newPasswordAfterReset}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "6. Test Token Reuse (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (!response.data.valid) {",
									"        console.log('‚úÖ Token correctly invalidated after use');",
									"    } else {",
									"        console.log('‚ùå Security issue: Token can be reused');",
									"    }",
									"} else {",
									"    console.log('‚ùå Token reuse test failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"{{resetToken}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/validate-reset-token",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "validate-reset-token"]
						}
					}
				},
				{
					"name": "7. Logout Single Device (Session Destroy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Logged out successfully - Session destroyed');",
									"} else {",
									"    console.log('‚ùå Logout failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "logout"]
						}
					}
				},
				{
					"name": "8. Test Session After Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 401) {",
									"    console.log('‚úÖ Access denied after logout as expected');",
									"} else {",
									"    console.log('‚ùå Should not have access after logout');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "profile"]
						}
					}
				}
			]
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "1. Get All Users (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users"]
						}
					}
				},
				{
					"name": "2. Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{testUserId}}",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users", "{{testUserId}}"]
						}
					}
				},
				{
					"name": "3. Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{testUserId}}",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users", "{{testUserId}}"]
						}
					}
				},
				{
					"name": "4. Update User Role",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{testUserId}}/role",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users", "{{testUserId}}", "role"]
						}
					}
				}
			]
		},
		{
			"name": "üìù Blog Posts",
			"item": [
				{
					"name": "1. Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('testPostId', response.data.id);",
									"    pm.environment.set('testPostSlug', response.data.slug);",
									"    console.log('‚úÖ Post created successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Blog Post\",\n  \"contentBlocks\": [\n    {\n      \"order\": 0,\n      \"title\": \"Introduction\",\n      \"content\": \"This is a test blog post content for API testing.\"\n    },\n    {\n      \"order\": 1,\n      \"title\": \"Main Content\",\n      \"content\": \"This is the main content section with more detailed information.\"\n    }\n  ],\n  \"categories\": [\"Test Category\"],\n  \"authors\": [\"Test Author\"],\n  \"seo\": {\n    \"title\": \"Test Blog Post - SEO Title\",\n    \"description\": \"This is a test blog post for API testing purposes with SEO optimization.\"\n  },\n  \"featuredImage\": \"https://example.com/test-image.jpg\",\n  \"language\": \"en\",\n  \"isPublished\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "2. Get All Posts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "3. Get Post by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "4. Get Post by Slug",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/slug/{{testPostSlug}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "slug", "{{testPostSlug}}"]
						}
					}
				},
				{
					"name": "5. Update Post",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Test Blog Post\",\n  \"content\": \"This is updated content.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "6. Delete Post",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				}
			]
		},
		{
			"name": "üìÇ Categories",
			"item": [
				{
					"name": "1. Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('testCategoryId', response.data.id);",
									"    console.log('‚úÖ Category created successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Category\",\n  \"description\": \"Test category description\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": ["{{baseUrl}}"],
							"path": ["categories"]
						}
					}
				},
				{
					"name": "2. Get All Categories",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": ["{{baseUrl}}"],
							"path": ["categories"]
						}
					}
				},
				{
					"name": "3. Get Category by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/{{testCategoryId}}",
							"host": ["{{baseUrl}}"],
							"path": ["categories", "{{testCategoryId}}"]
						}
					}
				},
				{
					"name": "4. Update Category",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Test Category\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories/{{testCategoryId}}",
							"host": ["{{baseUrl}}"],
							"path": ["categories", "{{testCategoryId}}"]
						}
					}
				},
				{
					"name": "5. Delete Category",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories/{{testCategoryId}}",
							"host": ["{{baseUrl}}"],
							"path": ["categories", "{{testCategoryId}}"]
						}
					}
				}
			]
		},
		{
			"name": "üèóÔ∏è Projects",
			"item": [
				{
					"name": "1. Get All Projects (Super Admin Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response has data array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    if (response.data.length > 0) {",
									"        const project = response.data[0];",
									"        pm.test('Project has required fields', function () {",
									"            pm.expect(project).to.have.property('id');",
									"            pm.expect(project).to.have.property('name');",
									"            pm.expect(project).to.have.property('is_active');",
									"        });",
									"        ",
									"        // Store first project for tests",
									"        pm.environment.set('existingProjectId', project.id);",
									"        pm.environment.set('existingProjectName', project.name);",
									"    }",
									"    ",
									"    console.log(`‚úÖ Found ${response.data.length} active projects`);",
									"} else {",
									"    console.log('‚ùå Failed to get projects - check admin authentication');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						}
					}
				},
				{
					"name": "2. Get All Projects Including Inactive (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Response has data array', function () {",
									"        pm.expect(response.data).to.be.an('array');",
									"    });",
									"    ",
									"    console.log(`‚úÖ Admin view: Found ${response.data.length} total projects (including inactive)`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/admin/all",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "admin", "all"]
						}
					}
				},
				{
					"name": "3. Create New Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.test('Project created successfully', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data.name).to.eql('test-project-api');",
									"    });",
									"    ",
									"    // Store created project for further tests",
									"    pm.environment.set('testProjectId', response.data.id);",
									"    pm.environment.set('testProjectName', response.data.name);",
									"    ",
									"    console.log('‚úÖ Project created with ID:', response.data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"test-project-api\",\n  \"url\": \"https://test-project.example.com\",\n  \"description\": \"Test project created via API for testing purposes\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						}
					}
				},
				{
					"name": "4. Get Project by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project details retrieved', function () {",
									"        pm.expect(response.data).to.have.property('id');",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data.id).to.eql(pm.environment.get('testProjectId'));",
									"    });",
									"    ",
									"    console.log('‚úÖ Project details retrieved:', response.data.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{testProjectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{testProjectId}}"]
						}
					}
				},
				{
					"name": "5. Get Project by Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project found by name', function () {",
									"        pm.expect(response.data).to.have.property('name');",
									"        pm.expect(response.data.name).to.eql(pm.environment.get('testProjectName'));",
									"    });",
									"    ",
									"    console.log('‚úÖ Project found by name:', response.data.name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/name/{{testProjectName}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "name", "{{testProjectName}}"]
						}
					}
				},
				{
					"name": "6. Update Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project updated successfully', function () {",
									"        pm.expect(response.data).to.have.property('description');",
									"        pm.expect(response.data.description).to.include('Updated');",
									"    });",
									"    ",
									"    console.log('‚úÖ Project updated successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Updated test project description via API\",\n  \"url\": \"https://updated-test-project.example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/projects/{{testProjectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{testProjectId}}"]
						}
					}
				},
				{
					"name": "7. Soft Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project deleted successfully', function () {",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.message).to.include('deleted successfully');",
									"    });",
									"    ",
									"    console.log('‚úÖ Project soft deleted successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{testProjectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{testProjectId}}"]
						}
					}
				},
				{
					"name": "8. Try to Get Deleted Project (Should fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"if (pm.response.code === 404) {",
									"    console.log('‚úÖ Soft deleted project correctly not found in public view');",
									"} else {",
									"    console.log('‚ùå Soft deleted project still accessible');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/projects/{{testProjectId}}",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{testProjectId}}"]
						}
					}
				},
				{
					"name": "9. Hard Delete Project (Cleanup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Project permanently deleted', function () {",
									"        pm.expect(response).to.have.property('message');",
									"        pm.expect(response.message).to.include('permanently deleted');",
									"    });",
									"    ",
									"    console.log('‚úÖ Project permanently deleted for cleanup');",
									"    ",
									"    // Clean up environment variables",
									"    pm.environment.unset('testProjectId');",
									"    pm.environment.unset('testProjectName');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects/{{testProjectId}}/hard",
							"host": ["{{baseUrl}}"],
							"path": ["projects", "{{testProjectId}}", "hard"]
						}
					}
				}
			]
		},
		{
			"name": "üîó User Projects",
			"item": [
				{
					"name": "1. Assign User to Project (by userId)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"projectName\": \"{{projectName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user-projects/assign",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assign"]
						}
					}
				},
				{
					"name": "1b. Assign User to Project (by userEmail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userEmail\": \"{{testUserEmail}}\",\n  \"projectName\": \"{{secondProjectName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user-projects/assign",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assign"]
						}
					}
				},
				{
					"name": "2. Get User Projects",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user-projects/user/{{testUserId}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "user", "{{testUserId}}", "projects"]
						}
					}
				},
				{
					"name": "3. Get Project Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user-projects/project/{{projectName}}/users",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "project", "{{projectName}}", "users"]
						}
					}
				},
				{
					"name": "4. Get All User-Project Assignments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user-projects/assignments",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assignments"]
						}
					}
				},
				{
					"name": "5. Unassign User from Project",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user-projects/unassign/{{testUserId}}/{{projectName}}",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "unassign", "{{testUserId}}", "{{projectName}}"]
						}
					}
				}
			]
		},
		{
			"name": "üîí Cross-Project Security Tests",
			"item": [
				{
					"name": "Setup - Get Project IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    const projects = response.data;",
									"    ",
									"    // Find and store project IDs",
									"    const techBlog = projects.find(p => p.name === 'tech-blog');",
									"    const ourNews = projects.find(p => p.name === 'our-news');",
									"    const companyUpdates = projects.find(p => p.name === 'company-updates');",
									"    ",
									"    if (techBlog) pm.environment.set('projectId', techBlog.id);",
									"    if (ourNews) pm.environment.set('secondProjectId', ourNews.id);",
									"    if (companyUpdates) pm.environment.set('thirdProjectId', companyUpdates.id);",
									"    ",
									"    console.log('‚úÖ Project IDs stored for cross-project testing');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/projects",
							"host": ["{{baseUrl}}"],
							"path": ["projects"]
						}
					}
				},
				{
					"name": "0. Assign Test User to First Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('‚úÖ Test user assigned to first project successfully');",
									"} else {",
									"    console.log('‚ùå Failed to assign test user to first project');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"projectName\": \"{{projectName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user-projects/assign",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assign"]
						}
					}
				},
				{
					"name": "1. Create Post in Wrong Project (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This should fail because user is assigned to tech-blog but trying to post to our-news",
									"pm.test('Should fail with 403 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404, 400]);",
									"});",
									"",
									"pm.test('Should contain error message about project access', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Project');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "projectname",
								"value": "{{secondProjectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Unauthorized Cross-Project Post\",\n  \"contentBlocks\": [\n    {\n      \"order\": 0,\n      \"title\": \"Introduction\",\n      \"content\": \"This should fail because user is not assigned to this project\"\n    }\n  ],\n  \"categories\": [],\n  \"authors\": [\"Test Author\"],\n  \"language\": \"en\",\n  \"isPublished\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "2. Create Category in Wrong Project (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 or 404', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404, 400]);",
									"});",
									"",
									"pm.test('Should contain error message about project access', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Project');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "projectname",
								"value": "{{thirdProjectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Unauthorized Category\",\n  \"description\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": ["{{baseUrl}}"],
							"path": ["categories"]
						}
					}
				},
				{
					"name": "3. Access Posts from Wrong Project (Should Return Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 200 but empty data', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array').that.is.empty;",
									"});",
									"",
									"console.log('‚úÖ Correctly isolated posts by project');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{secondProjectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "4. Access Categories from Wrong Project (Should Return Empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 200 but empty data', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array').that.is.empty;",
									"});",
									"",
									"console.log('‚úÖ Correctly isolated categories by project');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{thirdProjectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": ["{{baseUrl}}"],
							"path": ["categories"]
						}
					}
				},
				{
					"name": "5. Try to Update Post from Different Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Should contain not found message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "projectname",
								"value": "{{secondProjectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Trying to update cross-project post\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "6. Try to Delete Post from Different Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Should contain not found message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "projectname",
								"value": "{{thirdProjectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "7. Missing Project Header Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 400 Bad Request', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Should contain project header required message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "8. Invalid Project Name Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test('Should contain project not found message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Project not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "non-existent-project"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "9. Assign User to Second Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    console.log('‚úÖ User assigned to second project successfully');",
									"} else {",
									"    console.log('‚ùå Failed to assign user to second project');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"projectName\": \"{{secondProjectName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user-projects/assign",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assign"]
						}
					}
				},
				{
					"name": "10. Create Post in Second Project (Should Work Now)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('crossProjectPostId', response.data.id);",
									"    console.log('‚úÖ Post created in second project successfully');",
									"} else {",
									"    console.log('‚ùå Failed to create post in second project');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							},
							{
								"key": "projectname",
								"value": "{{secondProjectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Cross-Project Test Post\",\n  \"contentBlocks\": [\n    {\n      \"order\": 0,\n      \"title\": \"Introduction\",\n      \"content\": \"This post should work now that user is assigned to this project\"\n    }\n  ],\n  \"categories\": [],\n  \"authors\": [\"Test Author\"],\n  \"language\": \"en\",\n  \"isPublished\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "11. Verify Project Isolation - Check First Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return posts from first project only', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"    ",
									"    // Should not contain the cross-project post",
									"    const crossProjectPost = response.data.find(post => post.title === 'Cross-Project Test Post');",
									"    pm.expect(crossProjectPost).to.be.undefined;",
									"});",
									"",
									"console.log('‚úÖ Project isolation verified for first project');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "12. Verify Project Isolation - Check Second Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return posts from second project only', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"    ",
									"    // Should contain the cross-project post",
									"    const crossProjectPost = response.data.find(post => post.title === 'Cross-Project Test Post');",
									"    pm.expect(crossProjectPost).to.not.be.undefined;",
									"    ",
									"    // Should not contain the original test post",
									"    const originalPost = response.data.find(post => post.title === 'Test Blog Post');",
									"    pm.expect(originalPost).to.be.undefined;",
									"});",
									"",
									"console.log('‚úÖ Project isolation verified for second project');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{secondProjectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				}
			]
		},
		{
			"name": "üß™ Security Tests",
			"item": [
				{
					"name": "1. Access Protected Route Without Token",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{baseUrl}}/auth/users",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users"]
						}
					}
				},
				{
					"name": "2. Access Admin Route as User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users"]
						}
					}
				},
				{
					"name": "3. Invalid Token Test",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "profile"]
						}
					}
				},
				{
					"name": "4. Create READ_ONLY User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('readOnlyUserId', response.data.id);",
									"    console.log('‚úÖ READ_ONLY user created successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"readonly@blog.com\",\n  \"password\": \"readonly123\",\n  \"firstName\": \"ReadOnly\",\n  \"lastName\": \"User\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "5. Set User Role to READ_ONLY",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"READ_ONLY\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{readOnlyUserId}}/role",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "users", "{{readOnlyUserId}}", "role"]
						}
					}
				},
				{
					"name": "6. Login READ_ONLY User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('readOnlyToken', response.data.access_token);",
									"    console.log('‚úÖ READ_ONLY user logged in successfully');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"readonly@blog.com\",\n  \"password\": \"readonly123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "7. Assign READ_ONLY User to Project",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{readOnlyUserId}}\",\n  \"projectName\": \"{{projectName}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/user-projects/assign",
							"host": ["{{baseUrl}}"],
							"path": ["user-projects", "assign"]
						}
					}
				},
				{
					"name": "8. READ_ONLY User Try Create Post (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Should contain insufficient permissions message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"READ_ONLY User Post\",\n  \"contentBlocks\": [\n    {\n      \"order\": 0,\n      \"title\": \"Introduction\",\n      \"content\": \"This should fail\"\n    }\n  ],\n  \"categories\": [],\n  \"authors\": [\"READ_ONLY User\"],\n  \"language\": \"en\",\n  \"isPublished\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "9. READ_ONLY User Try Create Category (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Should contain insufficient permissions message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"READ_ONLY Category\",\n  \"description\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": ["{{baseUrl}}"],
							"path": ["categories"]
						}
					}
				},
				{
					"name": "10. READ_ONLY User Can Read Posts (Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should succeed with 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Should return posts data', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"});",
									"",
									"console.log('‚úÖ READ_ONLY user can read posts');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": ["{{baseUrl}}"],
							"path": ["posts"]
						}
					}
				},
				{
					"name": "11. READ_ONLY User Try Update Post (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Should contain insufficient permissions message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"READ_ONLY trying to update\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "12. READ_ONLY User Try Delete Post (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Should contain insufficient permissions message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "{{testPostId}}"]
						}
					}
				},
				{
					"name": "13. Regular User Try Access Admin Route (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should fail with 403 Forbidden', function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test('Should contain insufficient permissions message', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.message).to.include('Insufficient permissions');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{userToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/admin/all",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "admin", "all"]
						}
					}
				},
				{
					"name": "14. SUPER_ADMIN Access Admin Route (Should Work)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should succeed with 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Should return posts data', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.data).to.be.an('array');",
									"});",
									"",
									"console.log('‚úÖ SUPER_ADMIN can access admin routes');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}"
							},
							{
								"key": "projectname",
								"value": "{{projectName}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/admin/all",
							"host": ["{{baseUrl}}"],
							"path": ["posts", "admin", "all"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1"
		}
	]
} 