{
	"info": {
		"_postman_id": "YOUR_COLLECTION_ID",
		"name": "Blog RESTful API (NestJS + TypeORM + Role System)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"description": "Complete collection for the NestJS Blog RESTful API with Role-Based Access Control (RBAC), JWT with Refresh Tokens, and Email Verification\n\nRoles:\n- SUPER_ADMIN: Full access to all endpoints\n- USER: Can create/update/delete posts and manage own profile\n- READ_ONLY: Can only read posts and view own profile\n\nüîí SECURITY TEST FLOW:\n1. Run 'Security Tests' folder in order to validate all security controls\n2. Each test builds upon the previous ones\n3. Tests cover ownership validation, role restrictions, and proper error handling"
	},
	"item": [
		{
			"name": "üîí Security Tests (Run in Order)",
			"description": "Complete security test suite to validate role-based access control and post ownership validation. Run these tests in order to verify all security controls are working correctly.",
			"item": [
				{
					"name": "1Ô∏è‚É£ Setup - Admin Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@blog.com\",\n    \"password\": \"your_secure_admin_password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "üîê Step 1: Login as SUPER_ADMIN to get admin access token.\n\nThis token will be used for:\n- Creating test users\n- Changing user roles\n- Testing admin privileges"
					},
					"response": []
				},
				{
					"name": "2Ô∏è‚É£ Setup - Create Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save test user ID for later use",
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.id) {",
									"    pm.globals.set('testUserId', pm.response.json().data.id);",
									"    console.log('Test User ID saved:', pm.response.json().data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "üë§ Step 2: Create a regular USER for testing ownership controls.\n\nExpected: 201 Created\nRole: USER (default)\n\nThis user will be used to test:\n- Creating own posts\n- Attempting to modify others' posts (should fail)\n- Updating own posts (should succeed)"
					},
					"response": []
				},
				{
					"name": "3Ô∏è‚É£ Setup - Test User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save test user access token",
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.access_token) {",
									"    pm.globals.set('testUserToken', pm.response.json().data.access_token);",
									"    console.log('Test User token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@example.com\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "üîë Step 3: Login as the test user to get their access token.\n\nExpected: 200 OK with access_token\nRole: USER\n\nThis token will be used for testing user-level permissions."
					},
					"response": []
				},
				{
					"name": "4Ô∏è‚É£ Setup - Create ReadOnly User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save readonly user ID for role change",
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.id) {",
									"    pm.globals.set('readOnlyUserId', pm.response.json().data.id);",
									"    console.log('ReadOnly User ID saved:', pm.response.json().data.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"readonly@example.com\",\n    \"firstName\": \"ReadOnly\",\n    \"lastName\": \"User\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "üìñ Step 4: Create a user that will be converted to READ_ONLY role.\n\nExpected: 201 Created\nRole: USER (will be changed to READ-only in next step)"
					},
					"response": []
				},
				{
					"name": "5Ô∏è‚É£ Setup - Change User to ReadOnly",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"READ_ONLY\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{readOnlyUserId}}/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users",
								"{{readOnlyUserId}}",
								"role"
							]
						},
						"description": "‚öôÔ∏è Step 5: Admin changes user role to READ_ONLY.\n\nExpected: 200 OK\nNew Role: READ_ONLY\n\nOnly SUPER_ADMIN can change user roles."
					},
					"response": []
				},
				{
					"name": "6Ô∏è‚É£ Setup - ReadOnly User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save readonly user access token",
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.access_token) {",
									"    pm.globals.set('readOnlyToken', pm.response.json().data.access_token);",
									"    console.log('ReadOnly User token saved');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"readonly@example.com\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "üîê Step 6: Login as READ_ONLY user to get their token.\n\nExpected: 200 OK with access_token\nRole: READ_ONLY\n\nThis token will be used for testing read-only restrictions."
					},
					"response": []
				},
				{
					"name": "7Ô∏è‚É£ Test - User Creates Own Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save test post ID for ownership tests",
									"if (pm.response.json() && pm.response.json().data && pm.response.json().data.id) {",
									"    pm.globals.set('testPostId', pm.response.json().data.id);",
									"    console.log('Test Post ID saved:', pm.response.json().data.id);",
									"}",
									"",
									"// Verify the post was created with correct user ID",
									"pm.test('Post created with correct user ID', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.userId).to.eql(pm.globals.get('testUserId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUserToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"projectIdentifier\": \"test\",\n    \"title\": \"Test User Post\",\n    \"slug\": \"test-user-post\",\n    \"contentBlocks\": [\n        {\n            \"order\": 0,\n            \"content\": \"This is a test post by regular user\"\n        }\n    ],\n    \"categories\": [\"Test\"],\n    \"authors\": [\"Test User\"],\n    \"language\": \"en\",\n    \"isPublished\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "‚úÖ Step 7: Regular user creates their own post.\n\nExpected: 201 Created\nValidation: Post should be assigned to the user who created it\n\nThis post will be used for testing ownership controls."
					},
					"response": []
				},
				{
					"name": "8Ô∏è‚É£ Test - Get All Posts (Find Target Post)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Find a post that belongs to a different user",
									"const responseJson = pm.response.json();",
									"const testUserId = pm.globals.get('testUserId');",
									"",
									"if (responseJson.data && responseJson.data.length > 0) {",
									"    // Find a post that doesn't belong to the test user",
									"    const otherPost = responseJson.data.find(post => post.userId !== testUserId);",
									"    ",
									"    if (otherPost) {",
									"        pm.globals.set('otherPostId', otherPost.id);",
									"        pm.globals.set('otherPostUserId', otherPost.userId);",
									"        console.log('Found other user post:', otherPost.id, 'owned by:', otherPost.userId);",
									"    } else {",
									"        console.log('No other user posts found - all posts belong to test user');",
									"    }",
									"    ",
									"    console.log('Total posts found:', responseJson.data.length);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "üîç Step 8: Get all posts to find a post owned by another user.\n\nThis helps identify a post that the test user should NOT be able to modify.\nWe'll use this for testing ownership validation."
					},
					"response": []
				},
				{
					"name": "9Ô∏è‚É£ Test - User Tries to Update Other's Post (SHOULD FAIL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User cannot update other user\\'s post', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"});",
									"",
									"pm.test('Returns appropriate error message', function () {",
									"    const responseJson = pm.response.json();",
									"    if (pm.response.code === 403) {",
									"        pm.expect(responseJson.message).to.include('own posts');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUserToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"HACKED POST!\",\n    \"slug\": \"hacked-post\",\n    \"contentBlocks\": [\n        {\n            \"order\": 0,\n            \"content\": \"This should not work!\"\n        }\n    ],\n    \"categories\": [\"Hack\"],\n    \"authors\": [\"Hacker\"],\n    \"language\": \"en\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{otherPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{otherPostId}}"
							]
						},
						"description": "‚ùå Step 9: User attempts to update another user's post.\n\nExpected: 403 Forbidden\nMessage: \"You can only update your own posts\"\n\nThis validates ownership control is working correctly."
					},
					"response": []
				},
				{
					"name": "üîü Test - User Tries to Delete Other's Post (SHOULD FAIL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User cannot delete other user\\'s post', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"});",
									"",
									"pm.test('Returns appropriate error message', function () {",
									"    const responseJson = pm.response.json();",
									"    if (pm.response.code === 403) {",
									"        pm.expect(responseJson.message).to.include('own posts');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{testUserToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{otherPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{otherPostId}}"
							]
						},
						"description": "‚ùå Step 10: User attempts to delete another user's post.\n\nExpected: 403 Forbidden\nMessage: \"You can only delete your own posts\"\n\nThis validates ownership control works for delete operations too."
					},
					"response": []
				},
				{
					"name": "1Ô∏è‚É£1Ô∏è‚É£ Test - User Updates Own Post (SHOULD SUCCEED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User can update own post', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test('Post was actually updated', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.title).to.eql('USER CAN UPDATE OWN POST - UPDATED');",
									"    pm.expect(responseJson.data.categories).to.include('UpdatedByUser');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{testUserToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"USER CAN UPDATE OWN POST - UPDATED\",\n    \"categories\": [\"UpdatedByUser\", \"Success\"],\n    \"authors\": [\"Test User - Updated\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{testPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{testPostId}}"
							]
						},
						"description": "‚úÖ Step 11: User updates their own post.\n\nExpected: 200 OK\nValidation: Post should be successfully updated\n\nThis confirms users can modify their own content."
					},
					"response": []
				},
				{
					"name": "1Ô∏è‚É£2Ô∏è‚É£ Test - Admin Updates Any Post (SHOULD SUCCEED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Admin can update any post', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test('Post was updated by admin', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.data.title).to.eql('ADMIN CAN UPDATE ANY POST');",
									"    pm.expect(responseJson.data.categories).to.include('AdminUpdate');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"ADMIN CAN UPDATE ANY POST\",\n    \"categories\": [\"AdminUpdate\", \"Success\"],\n    \"seo\": {\n        \"title\": \"Admin updated this\",\n        \"description\": \"Admin has full access to all posts\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{otherPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{otherPostId}}"
							]
						},
						"description": "‚úÖ Step 12: Admin updates any user's post.\n\nExpected: 200 OK\nValidation: Admin should be able to modify any post\n\nThis confirms SUPER_ADMIN has full access privileges."
					},
					"response": []
				},
				{
					"name": "1Ô∏è‚É£3Ô∏è‚É£ Test - ReadOnly User Tries to Create Post (SHOULD FAIL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('ReadOnly user cannot create post', function () {",
									"    pm.expect(pm.response.code).to.eql(403);",
									"});",
									"",
									"pm.test('Returns role restriction message', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('Required roles');",
									"    pm.expect(responseJson.message).to.include('READ_ONLY');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"projectIdentifier\": \"test\",\n    \"title\": \"ReadOnly Attempt\",\n    \"slug\": \"readonly-attempt\",\n    \"contentBlocks\": [\n        {\n            \"order\": 0,\n            \"content\": \"This should not work\"\n        }\n    ],\n    \"categories\": [\"Test\"],\n    \"authors\": [\"ReadOnly User\"],\n    \"language\": \"en\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "‚ùå Step 13: READ_ONLY user attempts to create a post.\n\nExpected: 403 Forbidden\nMessage: \"Access denied. Required roles: [SUPER_ADMIN, USER]. Your role: READ_ONLY\"\n\nThis validates role-based restrictions are working."
					},
					"response": []
				},
				{
					"name": "1Ô∏è‚É£4Ô∏è‚É£ Test - ReadOnly User Reads Posts (SHOULD SUCCEED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('ReadOnly user can read posts', function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test('Returns posts data', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql('SUCCESS');",
									"    pm.expect(responseJson.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{readOnlyToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "‚úÖ Step 14: READ_ONLY user reads posts.\n\nExpected: 200 OK\nValidation: Should return posts data successfully\n\nThis confirms READ_ONLY users can access read endpoints."
					},
					"response": []
				},
				{
					"name": "üéØ Security Test Summary",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "üèÅ SECURITY TEST RESULTS SUMMARY:\n\n‚úÖ PASSED TESTS:\n‚Ä¢ Admin can login and get access token\n‚Ä¢ Regular users can be created and login\n‚Ä¢ User roles can be changed by admin\n‚Ä¢ Users can create their own posts\n‚Ä¢ Users can update their own posts\n‚Ä¢ Admin can update any post\n‚Ä¢ READ_ONLY users can read posts\n\n‚ùå BLOCKED TESTS (Security Working):\n‚Ä¢ Users CANNOT update other users' posts (403 Forbidden)\n‚Ä¢ Users CANNOT delete other users' posts (403 Forbidden)  \n‚Ä¢ READ_ONLY users CANNOT create posts (403 Forbidden)\n\nüîê SECURITY FEATURES VALIDATED:\n‚Ä¢ Role-based access control (RBAC)\n‚Ä¢ Post ownership validation\n‚Ä¢ JWT token authentication\n‚Ä¢ Proper error messages for unauthorized access\n‚Ä¢ SUPER_ADMIN override capabilities\n‚Ä¢ READ_ONLY role restrictions\n\nüéØ All security controls are working correctly!"
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register (Public)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Register a new user with email, firstName, lastName, and password. All fields are required and password must be at least 8 characters long. Returns the created user object without the password.\n\nNew users are assigned USER role by default.\n\nThis is a public endpoint that anyone can access without authentication."
					},
					"response": [
						{
							"name": "Successful Registration",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"password\": \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"user-1684829403920\",\n        \"email\": \"user@example.com\",\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"google_id\": null,\n        \"picture\": null,\n        \"is_email_verified\": false,\n        \"role\": \"USER\",\n        \"refresh_token\": null,\n        \"created_at\": \"2023-08-15T10:23:45.000Z\",\n        \"updated_at\": \"2023-08-15T10:23:45.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Login (Public)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@blog.com\",\n    \"password\": \"your_secure_admin_password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login with email and password. Both fields are required. Returns both access_token (15min) and refresh_token (7d) along with user object.\n\nAccess token is used for API requests, refresh token is used to get new tokens when access token expires.\n\nDefault admin credentials:\n- Email: admin@blog.com\n- Password: admin123\n- Role: SUPER_ADMIN\n\nThis is a public endpoint that anyone can access without authentication."
					},
					"response": [
						{
							"name": "Successful Login (Admin)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"admin@blog.com\",\n    \"password\": \"admin123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGJsb2cuY29tIiwic3ViIjoiNWQyNjUwNWQtYmViNS00NjI1LWIzZDEtMTE4ZjAxYjZmZjhkIiwiaWF0IjoxNzQ4MjUyMTgxLCJleHAiOjE3NDgyNTMwODF9.xjOo8yRnPgtAasMK41_L3g26iu0TN2uukoloc-0hYjw\",\n        \"refresh_token\": \"fe0e56773ab46f875ad8aa69c0c5f9d35d936e3cdd082edde82f83c5df9719ff\",\n        \"user\": {\n            \"id\": \"5d26505d-beb5-4625-b3d1-118f01b6ff8d\",\n            \"email\": \"admin@blog.com\",\n            \"first_name\": \"Super\",\n            \"last_name\": \"Admin\",\n            \"google_id\": null,\n            \"picture\": null,\n            \"is_email_verified\": true,\n            \"role\": \"SUPER_ADMIN\",\n            \"refresh_token\": null,\n            \"created_at\": \"2025-05-26T06:36:02.599Z\",\n            \"updated_at\": \"2025-05-26T06:36:02.660Z\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Refresh Token (Public)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						},
						"description": "Exchange a valid refresh token for new access and refresh tokens. This implements token rotation for enhanced security.\n\nThe old refresh token is invalidated and a new one is issued.\n\nAccess token expires in 15 minutes, refresh token expires in 7 days."
					},
					"response": [
						{
							"name": "Successful Token Refresh",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"fe0e56773ab46f875ad8aa69c0c5f9d35d936e3cdd082edde82f83c5df9719ff\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.NEW_ACCESS_TOKEN\",\n        \"refresh_token\": \"NEW_REFRESH_TOKEN_HERE\"\n    }\n}"
						},
						{
							"name": "Invalid Refresh Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"invalid_token\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"FAILED\",\n    \"message\": \"Invalid refresh token\",\n    \"statusCode\": 401,\n    \"timestamp\": \"2025-01-26T10:30:45.123Z\"\n}"
						}
					]
				},
				{
					"name": "Logout (Public)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refresh_token\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"logout"
							]
						},
						"description": "Logout user by invalidating their refresh token. This ensures the refresh token cannot be used again.\n\nAfter logout, the user must login again to get new tokens."
					},
					"response": [
						{
							"name": "Successful Logout",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refresh_token\": \"fe0e56773ab46f875ad8aa69c0c5f9d35d936e3cdd082edde82f83c5df9719ff\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"message\": \"Logged out successfully\"\n    }\n}"
						}
					]
				},
				{
					"name": "Google OAuth Login (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/google",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"google"
							]
						},
						"description": "Initiates Google OAuth 2.0 authentication flow. This redirects to Google's consent screen.\n\nAfter user grants permission, Google redirects to /auth/google/callback with authorization code."
					}
				},
				{
					"name": "Get Profile (Protected)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"profile"
							]
						},
						"description": "Get current user's profile information. Returns the user object without password.\n\nRequires valid access token. All authenticated users can access their own profile."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"5d26505d-beb5-4625-b3d1-118f01b6ff8d\",\n        \"email\": \"admin@blog.com\",\n        \"first_name\": \"Super\",\n        \"last_name\": \"Admin\",\n        \"google_id\": null,\n        \"picture\": null,\n        \"is_email_verified\": true,\n        \"role\": \"SUPER_ADMIN\",\n        \"created_at\": \"2025-05-26T06:36:02.599Z\",\n        \"updated_at\": \"2025-05-26T06:36:02.660Z\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users (SUPER_ADMIN Only)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users"
							]
						},
						"description": "Get all users in the system. Only accessible by SUPER_ADMIN role.\n\nReturns an array of all users without passwords."
					},
					"response": [
						{
							"name": "Success (SUPER_ADMIN)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": [\n        {\n            \"id\": \"5d26505d-beb5-4625-b3d1-118f01b6ff8d\",\n            \"email\": \"admin@blog.com\",\n            \"first_name\": \"Super\",\n            \"last_name\": \"Admin\",\n            \"role\": \"SUPER_ADMIN\",\n            \"is_email_verified\": true,\n            \"created_at\": \"2025-05-26T06:36:02.599Z\",\n            \"updated_at\": \"2025-05-26T06:36:02.660Z\"\n        },\n        {\n            \"id\": \"71009bda-7c8c-45ab-a2f3-b5059e991359\",\n            \"email\": \"readonly@test.com\",\n            \"first_name\": \"Read\",\n            \"last_name\": \"Only\",\n            \"role\": \"READ_ONLY\",\n            \"is_email_verified\": false,\n            \"created_at\": \"2025-05-26T06:33:32.669Z\",\n            \"updated_at\": \"2025-05-26T06:36:43.299Z\"\n        }\n    ]\n}"
						},
						{
							"name": "Forbidden (Non-Admin)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{userAccessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"FAILED\",\n    \"message\": \"Access denied. Required roles: [SUPER_ADMIN]. Your role: USER\",\n    \"statusCode\": 403,\n    \"timestamp\": \"2025-01-26T10:30:45.123Z\"\n}"
						}
					]
				},
				{
					"name": "Get User by ID (Protected)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get specific user by ID. SUPER_ADMIN can view any user, other users can only view their own profile.\n\nRequires authentication and appropriate role permissions."
					},
					"response": [
						{
							"name": "Success (Own Profile)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/users/5d26505d-beb5-4625-b3d1-118f01b6ff8d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users",
										"5d26505d-beb5-4625-b3d1-118f01b6ff8d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"5d26505d-beb5-4625-b3d1-118f01b6ff8d\",\n        \"email\": \"admin@blog.com\",\n        \"first_name\": \"Super\",\n        \"last_name\": \"Admin\",\n        \"role\": \"SUPER_ADMIN\",\n        \"is_email_verified\": true,\n        \"created_at\": \"2025-05-26T06:36:02.599Z\",\n        \"updated_at\": \"2025-05-26T06:36:02.660Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update User (Protected)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Updated\",\n    \"lastName\": \"Name\",\n    \"email\": \"updated@email.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Update user information. SUPER_ADMIN can update any user, other users can only update their own profile.\n\nOptional fields: firstName, lastName, email, password\nEmail must be unique across all users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Updated\",\n    \"lastName\": \"Name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/users/5d26505d-beb5-4625-b3d1-118f01b6ff8d",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users",
										"5d26505d-beb5-4625-b3d1-118f01b6ff8d"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"5d26505d-beb5-4625-b3d1-118f01b6ff8d\",\n        \"email\": \"admin@blog.com\",\n        \"first_name\": \"Updated\",\n        \"last_name\": \"Name\",\n        \"role\": \"SUPER_ADMIN\",\n        \"is_email_verified\": true,\n        \"created_at\": \"2025-05-26T06:36:02.599Z\",\n        \"updated_at\": \"2025-05-26T06:36:02.660Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Update User Role (SUPER_ADMIN Only)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"role\": \"READ_ONLY\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{userId}}/role",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users",
								"{{userId}}",
								"role"
							]
						},
						"description": "Update a user's role. Only accessible by SUPER_ADMIN.\n\nAvailable roles:\n- SUPER_ADMIN: Full system access\n- USER: Can create/edit posts, manage own profile\n- READ_ONLY: Can only read posts and view own profile\n\nSUPER_ADMIN cannot change their own role."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role\": \"READ_ONLY\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/users/71009bda-7c8c-45ab-a2f3-b5059e991359/role",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users",
										"71009bda-7c8c-45ab-a2f3-b5059e991359",
										"role"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"71009bda-7c8c-45ab-a2f3-b5059e991359\",\n        \"email\": \"readonly@test.com\",\n        \"first_name\": \"Read\",\n        \"last_name\": \"Only\",\n        \"role\": \"READ_ONLY\",\n        \"is_email_verified\": false,\n        \"created_at\": \"2025-05-26T06:33:32.669Z\",\n        \"updated_at\": \"2025-05-26T06:36:43.299Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete User (Protected)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete a user account. SUPER_ADMIN can delete any user (except themselves), other users can only delete their own account.\n\nReturns 204 No Content on successful deletion."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/users/71009bda-7c8c-45ab-a2f3-b5059e991359",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"users",
										"71009bda-7c8c-45ab-a2f3-b5059e991359"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Create Post (USER/SUPER_ADMIN)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My First Blog Post\",\n    \"slug\": \"my-first-blog-post\",\n    \"projectIdentifier\": \"my-blog\",\n    \"contentBlocks\": [\n        {\n            \"order\": 0,\n            \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction to my first blog post.</p>\"\n        },\n        {\n            \"order\": 1,\n            \"content\": \"<p>Here's some more content with <strong>bold text</strong> and <em>italic text</em>.</p>\"\n        }\n    ],\n    \"categories\": [\"Technology\", \"Programming\"],\n    \"authors\": [\"John Doe\"],\n    \"language\": \"en\",\n    \"seo\": {\n        \"title\": \"My First Blog Post - SEO Title\",\n        \"description\": \"This is my first blog post about technology and programming.\"\n    },\n    \"isPublished\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Create a new blog post. Only USER and SUPER_ADMIN roles can create posts.\n\nRequired fields: title, projectIdentifier, contentBlocks, authors, categories, language\nOptional fields: slug (auto-generated), seo (title, description), featuredImage, isPublished (defaults to false)"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"My First Blog Post\",\n    \"slug\": \"my-first-blog-post\",\n    \"projectIdentifier\": \"my-blog\",\n    \"contentBlocks\": [\n        {\n            \"order\": 0,\n            \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction to my first blog post.</p>\"\n        }\n    ],\n    \"categories\": [\"Technology\"],\n    \"authors\": [\"John Doe\"],\n    \"language\": \"en\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"post-uuid-here\",\n        \"title\": \"My First Blog Post\",\n        \"slug\": \"my-first-blog-post\",\n        \"projectIdentifier\": \"my-blog\",\n        \"contentBlocks\": [\n            {\n                \"order\": 0,\n                \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction to my first blog post.</p>\"\n            }\n        ],\n        \"categories\": [\"Technology\"],\n        \"authors\": [\"John Doe\"],\n        \"language\": \"en\",\n        \"seo\": {\n            \"title\": \"My First Blog Post - SEO Title\",\n            \"description\": \"This is my first blog post about technology and programming.\"\n        },\n        \"isPublished\": true,\n        \"created_at\": \"2023-08-15T10:23:45.000Z\",\n        \"updated_at\": \"2023-08-15T10:23:45.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get All Posts (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts?page=1&limit=10&sort=-created_at&projectIdentifier=my-blog&lang=en&category=Technology&author=John Doe&searchTerm=blog",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Items per page (default: 10)"
								},
								{
									"key": "sort",
									"value": "-created_at",
									"description": "Sort field (prefix with - for DESC)"
								},
								{
									"key": "projectIdentifier",
									"value": "my-blog",
									"description": "Filter by project"
								},
								{
									"key": "lang",
									"value": "en",
									"description": "Filter by language"
								},
								{
									"key": "category",
									"value": "Technology",
									"description": "Filter by category"
								},
								{
									"key": "author",
									"value": "John Doe",
									"description": "Filter by author"
								},
								{
									"key": "searchTerm",
									"value": "blog",
									"description": "Search in title"
								}
							]
						},
						"description": "Get all posts with pagination and filtering. This is a public endpoint accessible to all users including READ_ONLY.\n\nSupports filtering by project, language, category, author, and search term.\nSupports sorting by any field (prefix with - for descending order)."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/posts?page=1&limit=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"data\": [\n            {\n                \"id\": \"post-uuid-here\",\n                \"title\": \"My First Blog Post\",\n                \"slug\": \"my-first-blog-post\",\n                \"projectIdentifier\": \"my-blog\",\n                \"contentBlocks\": [\n                    {\n                        \"order\": 0,\n                        \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction.</p>\"\n                    }\n                ],\n                \"categories\": [\"Technology\"],\n                \"authors\": [\"John Doe\"],\n                \"language\": \"en\",\n                \"isPublished\": true,\n                \"created_at\": \"2023-08-15T10:23:45.000Z\",\n                \"updated_at\": \"2023-08-15T10:23:45.000Z\"\n            }\n        ],\n        \"pagination\": {\n            \"currentPage\": 1,\n            \"totalPages\": 1,\n            \"totalItems\": 1,\n            \"itemsPerPage\": 10\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Get Post by ID (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "Get a specific post by its UUID. This is a public endpoint accessible to all users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/posts/post-uuid-here",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"post-uuid-here"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"post-uuid-here\",\n        \"title\": \"My First Blog Post\",\n        \"slug\": \"my-first-blog-post\",\n        \"projectIdentifier\": \"my-blog\",\n        \"contentBlocks\": [\n            {\n                \"order\": 0,\n                \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction.</p>\"\n            }\n        ],\n        \"categories\": [\"Technology\"],\n        \"authors\": [\"John Doe\"],\n        \"language\": \"en\",\n        \"isPublished\": true,\n        \"created_at\": \"2023-08-15T10:23:45.000Z\",\n        \"updated_at\": \"2023-08-15T10:23:45.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get Post by Project & Slug (Public)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/my-blog/my-first-blog-post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"my-blog",
								"my-first-blog-post"
							]
						},
						"description": "Get a specific post by project identifier and slug. This is useful for SEO-friendly URLs.\n\nThis is a public endpoint accessible to all users."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/posts/my-blog/my-first-blog-post",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"my-blog",
										"my-first-blog-post"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"post-uuid-here\",\n        \"title\": \"My First Blog Post\",\n        \"slug\": \"my-first-blog-post\",\n        \"projectIdentifier\": \"my-blog\",\n        \"contentBlocks\": [\n            {\n                \"order\": 0,\n                \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction.</p>\"\n            }\n        ],\n        \"categories\": [\"Technology\"],\n        \"authors\": [\"John Doe\"],\n        \"language\": \"en\",\n        \"isPublished\": true,\n        \"created_at\": \"2023-08-15T10:23:45.000Z\",\n        \"updated_at\": \"2023-08-15T10:23:45.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Get All Posts - Admin (SUPER_ADMIN)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/admin/all?page=1&limit=10&includeUnpublished=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"admin",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number (default: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Items per page (default: 10)"
								},
								{
									"key": "includeUnpublished",
									"value": "true",
									"description": "Include unpublished posts (true/false)"
								},
								{
									"key": "sort",
									"value": "-created_at",
									"description": "Sort field (prefix with - for DESC)",
									"disabled": true
								},
								{
									"key": "projectIdentifier",
									"value": "my-blog",
									"description": "Filter by project",
									"disabled": true
								}
							]
						},
						"description": "Admin endpoint to get all posts including drafts. Only SUPER_ADMIN can access this endpoint.\n\nSet includeUnpublished=true to see draft posts."
					},
					"response": []
				},
				{
					"name": "Get Post by ID - Admin (SUPER_ADMIN)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/admin/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"admin",
								"{{postId}}"
							]
						},
						"description": "Admin endpoint to get any post by ID including unpublished drafts. Only SUPER_ADMIN can access this endpoint."
					},
					"response": []
				},
				{
					"name": "Update Post (USER/SUPER_ADMIN)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Blog Post Title\",\n    \"categories\": [\"Technology\", \"Programming\", \"Updated\"],\n    \"seo\": {\n        \"title\": \"Updated Blog Post Title - SEO\",\n        \"description\": \"Updated description for SEO\"\n    },\n    \"isPublished\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "Update an existing post. Only USER and SUPER_ADMIN roles can update posts.\n\nAll fields are optional. Only provided fields will be updated."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Updated Blog Post Title\",\n    \"categories\": [\"Technology\", \"Updated\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/post-uuid-here",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"post-uuid-here"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"id\": \"post-uuid-here\",\n        \"title\": \"Updated Blog Post Title\",\n        \"slug\": \"my-first-blog-post\",\n        \"projectIdentifier\": \"my-blog\",\n        \"contentBlocks\": [\n            {\n                \"order\": 0,\n                \"content\": \"<h1>Welcome to My Blog</h1><p>This is the introduction.</p>\"\n            }\n        ],\n        \"categories\": [\"Technology\", \"Updated\"],\n        \"authors\": [\"John Doe\"],\n        \"language\": \"en\",\n        \"isPublished\": true,\n        \"created_at\": \"2023-08-15T10:23:45.000Z\",\n        \"updated_at\": \"2023-08-15T11:30:20.000Z\"\n    }\n}"
						}
					]
				},
				{
					"name": "Delete Post (USER/SUPER_ADMIN)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						},
						"description": "Delete a post. Only USER and SUPER_ADMIN roles can delete posts.\n\nReturns 204 No Content on successful deletion."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/posts/post-uuid-here",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"post-uuid-here"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": null,
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-save access token from login and refresh responses",
					"if (pm.response.json() && pm.response.json().data && pm.response.json().data.access_token) {",
					"    pm.globals.set('accessToken', pm.response.json().data.access_token);",
					"    console.log('Access token saved to global variable');",
					"}",
					"",
					"// Auto-save refresh token from login and refresh responses",
					"if (pm.response.json() && pm.response.json().data && pm.response.json().data.refresh_token) {",
					"    pm.globals.set('refreshToken', pm.response.json().data.refresh_token);",
					"    console.log('Refresh token saved to global variable');",
					"}",
					"",
					"// Auto-save user ID from responses",
					"if (pm.response.json() && pm.response.json().data && pm.response.json().data.user && pm.response.json().data.user.id) {",
					"    pm.globals.set('userId', pm.response.json().data.user.id);",
					"    console.log('User ID saved to global variable');",
					"} else if (pm.response.json() && pm.response.json().data && pm.response.json().data.id) {",
					"    pm.globals.set('userId', pm.response.json().data.id);",
					"    console.log('User ID saved to global variable');",
					"}",
					"",
					"// Auto-save post ID from post creation responses",
					"if (pm.request.url.toString().includes('/posts') && pm.response.code === 201) {",
					"    if (pm.response.json() && pm.response.json().data && pm.response.json().data.id) {",
					"        pm.globals.set('postId', pm.response.json().data.id);",
					"        console.log('Post ID saved to global variable');",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testUserToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "readOnlyUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "readOnlyToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "otherPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "otherPostUserId",
			"value": "",
			"type": "string"
		}
	]
}